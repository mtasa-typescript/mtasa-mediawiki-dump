{{Client function}}
__NOTOC__
This function changes the visibility state of a GUI element.

==Syntax== 
<syntaxhighlight lang="lua">
bool guiSetVisible ( element guiElement, bool state )
</syntaxhighlight> 
{{OOP||[[GUI widgets|GuiElement]]:setVisible|visible|guiGetVisible}}

===Required Arguments=== 
*'''guiElement:''' the GUI element whose visibility is to be changed
*'''state:''' the new visibility state

===Returns===
Returns ''true'' if the element's visibility could be changed, ''false'' otherwise.

==Example== 
This example creates a GUI window and changes its visibility every 2 seconds, indefinitely.

<syntaxhighlight lang="lua">
-- Create a GUI window called 'myWindow'
myWindow = guiCreateWindow( 0.3, 0.3, 0.5, 0.60, "GUI window title", true )

-- Set a timer to change the window's visibility every 2 seconds, indefinitely
setTimer( function( )
	-- We toggle the visibility here by taking the opposite result of guiGetVisible (false => true, true => false), hence toggling its visibility
	guiSetVisible( myWindow, not guiGetVisible( myWindow ) )
end, 2000, 0 )
</syntaxhighlight>

This example creates a GUI window with ''yes'' and ''no'' buttons and you can toggle its visibility with the ''x'' key.

<syntaxhighlight lang="lua">addEventHandler( "onClientResourceStart", resourceRoot,
	function( )
		newgui.wind[ 1 ] = guiCreateWindow( 434, 304, 280, 123, "New Window", false )
		guiWindowSetSizable( newgui.wind[ 1 ], false )

		newgui.button[ 1 ] = guiCreateButton( 35, 46, 87, 40, "yes", false, newgui.wind[ 1 ] )
		newgui.button[ 2 ] = guiCreateButton( 166, 49, 92, 37, "no", false, newgui.wind[ 1 ] )

		showCursor( true )
	end
)

bindKey( "x", "down",
	function( )
		local state = not guiGetVisible( newgui.wind[ 1 ] )
		guiSetVisible( newgui.wind[ 1 ], state )
		showCursor( state )
	end
)</syntaxhighlight>

==See Also==
{{GUI_functions}}
{{GUI_events}}

[[en:GuiSetVisible]]
[[fr:GuiSetVisible]]
