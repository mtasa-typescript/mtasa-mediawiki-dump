__NOTOC__
{{Server client function}}
This function sets the state of the specified door on a vehicle.

==Syntax==
<syntaxhighlight lang="lua">bool setVehicleDoorState ( vehicle theVehicle, int door, int state )</syntaxhighlight>
{{OOP||[[vehicle]]:setDoorState||getVehicleDoorState}}

{{New feature/item|9.0158|1.5.8|20319|
<syntaxhighlight lang="lua">bool setVehicleDoorState ( vehicle theVehicle, int door, int state [, bool spawnFlyingComponent = true ] )</syntaxhighlight>
}}

==Required Arguments==
*'''theVehicle:''' The [[vehicle]] that you wish to change the door state of.
*'''door:''' An integer representing which door to set the state of. Valid values are:
**'''0:''' Hood
**'''1:''' Trunk
**'''2:''' Front left
**'''3:''' Front right
**'''4:''' Rear left
**'''5:''' Rear right
*'''state:''' An integer representing the state to set the door to. Valid values are:
**'''0:''' Shut, intact (aka Closed, undamaged)
**'''1:''' Ajar, intact (aka Slightly open, undamaged)
**'''2:''' Shut, damaged (aka Closed, damaged)
**'''3:''' Ajar, damaged (aka Slightly open, damaged)
**'''4:''' Missing

===Optional Arguments=== 
{{OptionalArg}}
{{New feature/item|9.0158|1.5.8|20319|
*'''spawnFlyingComponent:''' A boolean, if set to true, spawns flying doors etc. if you remove a component with <nowiki>state == 4</nowiki>.
}}

==Returns==
Returns ''true'' if the door state was successfully set, ''false'' otherwise.

==Example==
<syntaxhighlight lang="lua">
-- create a new vehicle
local newcar = createVehicle ( 520, 1024, 1024, 1024 )
-- break its front left door off
state = setVehicleDoorState ( newcar, 2, 4 )
</syntaxhighlight>

==See Also==
{{Vehicle functions}}
