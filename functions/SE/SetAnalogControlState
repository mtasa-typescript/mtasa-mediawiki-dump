__NOTOC__
{{Client function}}
This sets the analog control state of a control for the local player.

To change the analog controls for a [[ped]], please use [[setPedAnalogControlState]].

==Syntax==
<syntaxhighlight lang="lua">bool setAnalogControlState ( string control [, float state, bool forceOverrideNextFrame = false ] ) </syntaxhighlight>
===Required Arguments===
*'''control:''' The control that you want to set the state of. See [[control names]] for a list of possible controls.

===Optional Arguments===
*'''state:''' A [[float]] between 0 and 1 indicating the amount the control is pressed. If no value is provided, the analog control is removed.
<noinclude>{{New feature/item|3.0300|1.5.8|20756|
*'''forceOverrideNextFrame: ''' A [[bool]] indicating if the player input should force fully overriden for the next frame.
}}</noinclude>


===Returns===
Returns ''true'' if the control state was successfully set, ''false'' otherwise.

==Example==
This creates an ''/forwards'' command, which toggles your ''forwards'' control state between 0 and 1.
<syntaxhighlight lang="lua">
addCommandHandler( "forwards",
    function( )
        if ( getAnalogControlState( "forwards" ) == 0 ) then
            setAnalogControlState( "forwards", 1 )
        else
            setAnalogControlState( "forwards", 0 )
        end
    end
)
</syntaxhighlight>

This script invertes left and right vehicle steering for the player.
<syntaxhighlight lang="lua">
addEventHandler("onClientPreRender", root,
    function()
        local right = getAnalogControlState("vehicle_right", true)
        local left = getAnalogControlState("vehicle_left", true)
        
        if right > left then
            setAnalogControlState("vehicle_left", right, true)
        else
            setAnalogControlState("vehicle_right", left, true)
        end
    end
)
</syntaxhighlight>

==See Also==
{{Client input functions}}
