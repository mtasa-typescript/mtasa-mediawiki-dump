{{Client function}}
__NOTOC__
{{New feature/item|3.0157|1.5.6|14403|
This function sets the position of the dummies contained in a vehicle model. Use [[setVehicleComponentPosition]] to adjust the vehicle component positions.
}}

==Syntax==
<syntaxhighlight lang="lua">
bool setVehicleModelDummyPosition ( int modelID, string dummy, float x, float y, float z )
</syntaxhighlight>
{{OOP||[[Vehicle]].setVehicleModelDummyPosition||getVehicleModelDummyPosition }}

===Required Arguments=== 
* '''modelID''': The model ID which you want to apply the change to
* '''dummy''': The dummy whose position you want to change
* '''posX''', '''posY''', '''posZ''': The desired position

==Allowed dummies==
{{VehicleDummies}}

===Returns===
Returns ''true'' if everything went fine, ''false'' otherwise.

==Example== 
Given example will move all the dummies in vehicle that player is sitting in up and down, after he uses /move command.
<syntaxhighlight lang="lua">
local dummies = {
	"light_front_main",
	"light_rear_main",
	"light_front_second",
	"light_rear_second",
	"seat_front",
	"seat_rear",
	"exhaust",
	"engine",
	"gas_cap",
	"trailer_attach",
	"hand_rest",
	"exhaust_second",
	"wing_airtrail",
	"veh_gun"
}
local cache = {}

function move()
	local veh = getPedOccupiedVehicle( localPlayer )
	if not veh then return end

	local model = getElementModel(veh)

	for i,dum in ipairs(dummies) do
		setVehicleModelDummyPosition(model, dum, cache[dum][1], cache[dum][2], cache[dum][3] + math.sin(getTickCount()/1500))
	end
end

addCommandHandler( "move", function()
	local veh = getPedOccupiedVehicle( localPlayer )
	if not veh then return end
	local model = getElementModel(veh)

	for i,dum in ipairs(dummies) do
		local v = {getVehicleModelDummyPosition(model, dum)}
		cache[dum] = v
	end
	addEventHandler("onClientRender", root, move)
end)

</syntaxhighlight>

==See Also==
{{Client_vehicle_functions}}
