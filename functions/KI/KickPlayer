{{note| Don't forget to give admin rights to the resource, in which you are using kickPlayer function or it won't work.}}

{{Server function}}
__NOTOC__
This function will kick the specified player from the server.

==Syntax== 
<syntaxhighlight lang="lua">
bool kickPlayer ( player kickedPlayer, [ player/string responsiblePlayer, string reason = "" ] )         
</syntaxhighlight>
''or''
<syntaxhighlight lang="lua">
bool kickPlayer ( player kickedPlayer, [ string reason = "" ] )
</syntaxhighlight>
{{OOP||[[player]]:kick||}}
===Required Arguments=== 
*'''kickedPlayer:''' The player that will be kicked from the server

===Optional Arguments=== 
*'''responsiblePlayer:''' The player that is responsible for the event. '''Note''': If left out as in the second syntax, responsible player for the kick will be "Console" (Maximum 30 characters if using a string).
*'''reason:''' The reason for the kick. (Maximum 64 characters before 1.5.8, Maximum 128 characters after 1.5.8)

===Returns===
Returns ''true'' if the player was kicked succesfully, ''false'' if invalid arguments are specified.

==Example== 
This example lets a player kick anyone who has a lower level.
<syntaxhighlight lang="lua">
function kickPlayerHandler ( sourcePlayer, commandname, kickedname, ... )
	-- Get player element from the name
	local kicked = getPlayerFromName ( kickedname )
	-- If the client who sent the command has a higher level
        local reason = table.concat({...}, " ")
	if ( hasObjectPermissionTo ( sourcePlayer, "function.kickPlayer" ) ) then
		-- Kick the player
		kickPlayer ( kicked, sourcePlayer, reason )
	end
end
-- Add the "kick" command handler
addCommandHandler ( "kick", kickPlayerHandler )
</syntaxhighlight>

==See Also==
{{Admin_functions}}
[[es:kickPlayer]]
[[ru:kickPlayer]]
