__NOTOC__ 
{{Client function}} 
{{New items|3.0158|1.5.7|This function retrieves the theoretical width and height (in pixels) of a certain piece of text, if it were to be drawn using [[dxDrawText]].|20447}}

'''NOTE:''' This function already takes the client's screen resolution into account.

==Syntax==
<syntaxhighlight lang="lua">
float, float dxGetTextSize ( string text [, float width = 0, float scaleX = 1.0, float scaleY = 1.0, mixed font = "default", bool wordBreak = false, bool colorCoded = false] )
</syntaxhighlight>
{{OOP|This syntax requires you to ignore the font argument above| [[Element/DX font|font]]:getSize}}
===Required Arguments=== 
* '''text:''' A string representing the text for which you wish to retrieve with width for.

==Optional Arguments==
{{OptionalArg}}
* '''width:''' The width of the text. Use with ''wordBreak = true''.
* '''scaleX:''' The scale of the text. Scale can also be inputted as a [[Vector2]].
* '''scaleY:''' The scale of the text.
* '''font:''' Either a custom [[DX font]] element or the name of a built-in dx font:
{{DxFonts}}
* '''wordBreak:''' If set to ''true'', the text will wrap to a new line whenever it reaches the right side of the bounding box. If ''false'', the text will always be completely on one line.
* '''colorCoded:''' Should we exclude color codes from the width? False will include the hex in the length.

===Returns===
Returns two floats representing the width and height of the text in pixels.

==Example==
This example draws a text with black background at the bottom right corner of the screen.
<syntaxhighlight lang="lua">
local screenWidth, screenHeight = guiGetScreenSize()

local message = "Incredibly huuuuuuuge message"
local messageOffset = 32
local messagePadding = 16
local messageWidth = 256

function renderMessage()
    local textWidth, textHeight = dxGetTextSize(message, messageWidth, 2, "default", true)
    local x = screenWidth - textWidth - messageOffset
    local y = screenHeight - textHeight - messageOffset
    dxDrawRectangle(x - messagePadding, y - messagePadding, textWidth + messagePadding * 2, textHeight + messagePadding * 2, 0x80000000) -- draw background
    dxDrawText(message, x, y, x + textWidth, y + textHeight, 0xFFFFFFFF, 2, "default", "left", "top", false, true)
end
addEventHandler("onClientRender", root, renderMessage)
</syntaxhighlight>

[[File:DxGetTextSize.png|frame|none|Example]]

==Requirements==
{{Requirements|n/a|1.5.7-9.20447|}}

==See Also==
{{Drawing_functions}}
