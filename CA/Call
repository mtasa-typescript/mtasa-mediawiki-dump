__NOTOC__ 
{{Server client function}}
{{Note|Calls may incur a performance overhead - they are not equivalent in performance to calling functions in the same resource.}}
{{Important Note|The sourceResource and sourceResourceRoot "hidden" variables are available even if you use exports.*:*}}

This function is used to call a function from another resource (which must be running).

The function which you wish to call '''must''' first be exported within the resource's meta.  For example:
<syntaxhighlight lang="xml"><meta>
	<info author="jbeta" type="script" description="Scoreboard resource" />
	<script src="scoreboard_client.lua" type="client"/>
	<script src="scoreboard_exports.lua" type="server"/>
	
	<script src="scoreboard_http.lua" type="server"/>
	
	<export function="getScoreboardColumns" http="true" />
	<export function="getScoreboardRows" http="true" />
	
	<export function="addScoreboardColumn" type="server"/>
	<export function="removeScoreboardColumn" type="server"/>
	
	<export function="setPlayerScoreboardForced" type="server"/>
	<export function="setScoreboardForced" type="client"/>
</meta></syntaxhighlight>
This enables other resources to call a function from this resource.

You cannot call a server function from the client or vice versa. See [[triggerServerEvent]] and [[triggerClientEvent]] for possibilities to do that.

There is an easier syntax replacing this function. For example, you can instead of:<br>
  <syntaxhighlight lang="lua">call ( getResourceFromName ( "resource" ), "exportedFunction", 1, "2", "three" )</syntaxhighlight>
do much like a normal call:<br>
  <syntaxhighlight lang="lua">exports.resource:exportedFunction ( 1, "2", "three" )</syntaxhighlight>
If the resource name contains illegal characters (such as hyphens), you can also do:<br>
  <syntaxhighlight lang="lua">exports["resource-name"]:exportedFunction ( 1, "2", "three" )</syntaxhighlight>

Two extra "hidden" variables are passed to the exported function:
* '''sourceResource''' - The resource that called the exported function
* '''sourceResourceRoot''' - The resource root element of the resource which called the exported function.

==Syntax== 
<syntaxhighlight lang="lua">
var... call ( resource theResource, string theFunction, [ arguments... ] )
</syntaxhighlight> 
{{OOP||[[resource]]:call}}
===Required Arguments=== 
*'''theResource:''' This is a resource pointer which refers to the resource you are calling a function from.
*'''theFunction:''' This is a string with the name of the function which you want to call.

===Optional Arguments=== 
{{OptionalArg}} 
*'''arguments:''' Any arguments you may want to pass to the function when it is called. Any number of arguments of can be specified, each being passed to the designated function.

===Returns===
Returns anything that the designated function has returned, if the function has no return, nil is returned. If the function does not exist, is not exported, or the call was not successful it will return false.


==Syntax== 
<syntaxhighlight lang="lua">
exports["resource_name"]:exportedFunction([ arguments... ])
</syntaxhighlight>
<syntaxhighlight lang="lua">
exports.resource_name:exportedFunction([ arguments... ])
</syntaxhighlight> 

===Required Arguments=== 
*'''resource_name:''' Resource name
*'''exportedFunction:''' The name of the function you want to call. Its '''not''' a string.

===Optional Arguments=== 
{{OptionalArg}} 
*'''arguments:''' Any arguments you may want to pass to the function when it is called. Any number of arguments of can be specified, each being passed to the designated function.

===Returns===
Returns anything that the designated function has returned, if the function has no return, nil is returned. If the function does not exist, is not exported, or the call was not successful it will return false.

==Example==
<section name="Server" class="server" show="true"> 
This extract shows adding of a "kills" column to the scoreboard resource. This then sets the ''gameShowKills'' variable to true(or false), telling the rest of the script to start outputting kills.

<syntaxhighlight lang="lua">
function showKills ( option )
	if not option then
		-- Remove the "kills" column
		exports.scoreboard:removeScoreboardColumn("kills")
	else
		-- Add the "kills" column
		exports["scoreboard"]:addScoreboardColumn("kills")
		outputDebugString ( "Showing kills now..." )
	end
	gameShowKills = option 
end
</syntaxhighlight>
</section>

<section name="Server" class="server" show="false"> 
This extract shows adding of a "kills" column to the scoreboard resource. This then sets the ''gameShowKills'' variable to true(or false), telling the rest of the script to start outputting kills.

<syntaxhighlight lang="lua">
function showKills ( option )
	if not option then
		-- Remove the "kills" column
		call(getResourceFromName("scoreboard"), "removeScoreboardColumn", "kills")
	else
		-- Add the "kills" column
		call(getResourceFromName("scoreboard"), "addScoreboardColumn", "kills")
		outputDebugString ( "Showing kills now..." )
	end
	gameShowKills = option 
end
</syntaxhighlight>
</section>

==See Also==
{{Resource_functions}}
